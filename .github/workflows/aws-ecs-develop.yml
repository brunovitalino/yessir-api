name: CI/CD Pipeline Desenvolvimento

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: yessir-cluster
  ECS_SERVICE: yessir-api-service
  CONTAINER_NAME: yessir-api
  SONAR_PROJECT_VERSION: ${{ github.ref_name }}  # Exemplo: v1.0.0

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: YesSir Environment      

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # CI
      #- name: Get Latest Tag Version
      #  id: get_tag_version
      #  run: |
      #    # Obter a última tag
      #    TAG_VERSION=$(git describe --tags --abbrev=0)
      #    echo "Última tag: $TAG_VERSION"
      #    
      #    # Definir como variável de ambiente
      #    echo "SONAR_PROJECT_VERSION=$TAG_VERSION" >> $GITHUB_ENV

      - name: Install SonarQube Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.8.0.2856/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner.zip
          export PATH=$PWD/sonar-scanner-4.8.0.2856-linux/bin:$PATH

      - name: Run SonarQube Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectVersion=${{ env.SONAR_PROJECT_VERSION }} \
            -Dsonar.sources=src \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

      # CD
      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t brunovitalino/yessir-api-image:latest .
          docker push brunovitalino/yessir-api-image:${{ env.VERSION }}
          docker push brunovitalino/yessir-api-image:latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
