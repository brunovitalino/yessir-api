<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.0</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>lol.bvlabs</groupId>
	<artifactId>yessir-api</artifactId>
	<version>1.0.1</version>
	<name>YesSir API</name>
	<description>Uma API de solicitação de pedidos para estabelecimentos</description>
	<properties>
		<java.version>21</java.version>
		<!-- SonarQube Properties -->
		<sonar.sources>src/main/java</sonar.sources> <!-- Diretório do código-fonte principal -->
    	<sonar.tests>src/test/java</sonar.tests> <!-- Diretório dos testes -->
		<sonar.java.binaries>target/classes</sonar.java.binaries> <!-- Diretório dos arquivos compilados -->
		<sonar.java.source>21</sonar.java.source> <!-- Versão do Java -->
		<sonar.java.target>21</sonar.java.target> <!-- Versão do Java -->
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.token>${SONAR_TOKEN}</sonar.token>
		<sonar.organization>bv-labs</sonar.organization>
		<sonar.projectName>${project.name}</sonar.projectName>
		<sonar.projectKey>${project.artifactId}</sonar.projectKey>
		<sonar.projectVersion>${project.version}</sonar.projectVersion> <!-- Use o valor da versão do Maven -->
	</properties>
	<dependencyManagement>
	    <dependencies>
	        <dependency>
	            <groupId>io.micrometer</groupId>
	            <artifactId>micrometer-bom</artifactId>
	            <version>1.14.2</version>
	            <type>pom</type>
	            <scope>import</scope>
	        </dependency>
	    </dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- DEVELOPMENT -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<!-- TESTS -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<!-- VALIDATION -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<!-- METRICS -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
		  <groupId>io.micrometer</groupId>
		  <artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<!-- DATABASE -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-database-postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<!-- SECURITY -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.auth0</groupId>
			<artifactId>java-jwt</artifactId>
			<version>4.4.0</version>
		</dependency>
		<!-- DOCUMENTATION-->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.6.0</version>
		</dependency>
		<!-- OTHERS-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
		    <groupId>org.jacoco</groupId>
		    <artifactId>jacoco-maven-plugin</artifactId>
		    <version>0.8.12</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
		  <plugin>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
		  </plugin>
		  <plugin>
			<groupId>org.sonarsource.scanner.maven</groupId>
			<artifactId>sonar-maven-plugin</artifactId>
			<version>4.0.0.4121</version>
			<!--configuration>
			  <sonar.host.url>https://sonarcloud.io</sonar.host.url>
			</configuration-->
		  </plugin>
		  <!-- Jacoco Maven Plugin para gerar o relatório de cobertura -->
		  <plugin>
			<groupId>org.jacoco</groupId>
			<artifactId>jacoco-maven-plugin</artifactId>
			<version>0.8.12</version>
			<executions>
			  <!-- Preparar o agente do JaCoCo para coletar a cobertura -->
			  <execution>
				<id>prepare-agent</id> <!-- ID único para esta execução -->
				<goals>
				  <goal>prepare-agent</goal>  <!-- Prepara o agente JaCoCo para a execução -->
				</goals>
				<configuration>
				  <destFile>${project.build.directory}/jacoco.exec</destFile> <!-- Garantir o arquivo de cobertura -->
				</configuration>
			  </execution>
			  <!-- Gerar o relatório de cobertura após a execução dos testes -->
			  <execution>
				<id>generate-report</id> <!-- ID único para esta execução -->
            	<phase>prepare-package</phase> <!-- Gera o relatório após a fase de testes -->
				<goals>
				  <goal>report</goal> <!-- Gera o relatório de cobertura -->
				</goals>
			  </execution>
			  <!-- Verificar se a cobertura de código atinge os critérios mínimos -->
			  <execution>
				<id>check-coverage</id> <!-- ID único para esta execução -->
				<goals>
				  <goal>check</goal> <!-- Verifica os limites de cobertura -->
				</goals>
				<configuration>
				  <rules>
					<rule>
					<element>CLASS</element>
					<limits>
					  <limit>
						<counter>LINE</counter>
						<value>COVEREDRATIO</value>
						<minimum>0.5</minimum> <!-- Define que a cobertura mínima por linha deve ser 80% -->
					  </limit>
					</limits>
					</rule>
				  </rules>
				</configuration>
			  </execution>
			</executions>
		  </plugin>
		  <plugin>
			  <groupId>org.apache.maven.plugins</groupId>
			  <artifactId>maven-compiler-plugin</artifactId>
			  <configuration>
			    <source>21</source>
			    <target>21</target>
			  </configuration>
		  </plugin>
		  <!-- Maven Surefire Plugin que roda testes customizado para integrar com JaCoCo -->
		  <plugin>
		      <groupId>org.apache.maven.plugins</groupId>
		      <artifactId>maven-surefire-plugin</artifactId>
		      <!--configuration>
		        <argLine>
		          -Xmx1024m -XX:MaxPermSize=512m -javaagent:${settings.localRepository}/org/jacoco/org.jacoco.agent/0.8.12/jacoco-agent-0.8.12-runtime.jar=destfile=target/jacoco.exec
		        </argLine>
		        <forkCount>1C</forkCount> < Número de forks, 1C usa o número de núcleos >
		        <reuseForks>false</reuseForks> < Impede a reutilização do fork >
		      </configurion-->
		  </plugin>
		  
		</plugins>
	</build>

</project>
